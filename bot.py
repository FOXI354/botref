import telebot
from telebot import types
from config import BOT_TOKEN, CHANNEL_USERNAME
from database import init_db, add_user, get_balance, get_referrals, update_balance, user_exists

bot = telebot.TeleBot(BOT_TOKEN)
init_db()

pending_referrals = {}
ADMINS = [7236220432,5660220707,6981585339] 

admin_states = {}
temp_data = {}

@bot.message_handler(commands=['start'])
def start_handler(message):


    user_id = message.from_user.id
    args = message.text.split()

    if len(args) > 1 and args[1].isdigit():
        pending_referrals[user_id] = int(args[1])
    else:
        pending_referrals[user_id] = None

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME}"))
    markup.add(types.InlineKeyboardButton("üîÅ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub"))
    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üëá", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "check_sub")
def check_subscription(call):
    user_id = call.from_user.id
    try:
        member = bot.get_chat_member(f"@{CHANNEL_USERNAME}", user_id)
        if member.status not in ['member', 'administrator', 'creator']:
            raise Exception("Not subscribed")

        invited_by = pending_referrals.get(user_id)
        if invited_by == user_id:
            invited_by = None

        add_user(user_id, invited_by)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üéØ –ú–æ—è —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞", "üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", "üí± –í—ã–≤–æ–¥", "‚ùóÔ∏è –ü—Ä–∞–≤–∏–ª–∞")
        if user_id in ADMINS:
            markup.add("üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")

        bot.send_message(user_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!", reply_markup=markup)
        bot.answer_callback_query(call.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        bot.send_message(user_id, "‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.")
        bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda m: m.text == "‚ùóÔ∏è –ü—Ä–∞–≤–∏–ª–∞")
def rules(message):
    user_id = message.from_user.id
    bot.send_message(user_id, "‚ùóÔ∏è –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏: https://telegra.ph/Oficialnye-Pravila-ispolzovaniya-referalnogo-bota-Growgardenref-botWhitencode-06-10")

@bot.message_handler(func=lambda m: m.text == "üéØ –ú–æ—è —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞")
def ref_link(message):
    user_id = message.from_user.id
    link = f"https://t.me/{bot.get_me().username}?start={user_id}"
    bot.send_message(user_id, f"üéØ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\nüí∏ 1 —Ä–µ—Ñ–µ—Ä–∞–ª = 200 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –≤–∞–ª—é—Ç—ã Grow a garden\n –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")


@bot.message_handler(func=lambda m: m.text == "üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã")
def my_refs(message):
    user_id = message.from_user.id
    refs = get_referrals(user_id)
    if refs:
        bot.send_message(user_id, f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {len(refs)} —á–µ–ª–æ–≤–µ–∫(–∞):\n" + "\n".join(refs))
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")

@bot.message_handler(func=lambda m: m.text == "üí± –í—ã–≤–æ–¥")
def wiwod(message):
    user_id = message.from_user.id
    bot.send_message(user_id, "üí± –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–ª–∞–Ω—Å–∞ –≤ –ª—Å @snekyys –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤.")

@bot.message_handler(func=lambda m: m.text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å")
def my_balance(message):
    user_id = message.from_user.id
    balance = get_balance(user_id)
    bot.send_message(user_id, f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:,} –º–æ–Ω–µ—Ç")

# –ê–¥–º–∏–Ω–∫–∞

@bot.message_handler(func=lambda m: m.text == "üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
def admin_panel(message):
    if message.from_user.id not in ADMINS:
        return bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", "‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å", "‚ûñ –°–ø–∏—Å–∞—Ç—å", "üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", "‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å", "‚ûñ –°–ø–∏—Å–∞—Ç—å"])
def handle_admin_action(message):
    if message.from_user.id not in ADMINS:
        return
    admin_states[message.from_user.id] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

@bot.message_handler(func=lambda m: m.from_user.id in admin_states)
def process_admin_action(message):
    admin_id = message.from_user.id
    action = admin_states[admin_id]

    if admin_id in temp_data and "user_id" in temp_data[admin_id]:
        try:
            amount = int(message.text)
            user_id = temp_data[admin_id]["user_id"]
            if not user_exists(user_id):
                bot.send_message(admin_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            else:
                if action == "‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å":
                    update_balance(user_id, amount)
                    bot.send_message(admin_id, f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
                elif action == "‚ûñ –°–ø–∏—Å–∞—Ç—å":
                    update_balance(user_id, -amount)
                    bot.send_message(admin_id, f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {amount} –º–æ–Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            temp_data.pop(admin_id)
            admin_states.pop(admin_id)
        except ValueError:
            bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    else:
        try:
            user_id = int(message.text)
            temp_data[admin_id] = {"user_id": user_id}
            if action == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å":
                if not user_exists(user_id):
                    bot.send_message(admin_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                else:
                    balance = get_balance(user_id)
                    bot.send_message(admin_id, f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {balance} –º–æ–Ω–µ—Ç")
                admin_states.pop(admin_id)
                temp_data.pop(admin_id, None)
            else:
                bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        except ValueError:
            bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
bot.infinity_polling()

